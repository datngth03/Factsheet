using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using Sabeco_Factsheet.Permissions;
using Sabeco_Factsheet.TbUserMappingPersons;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using Sabeco_Factsheet.Shared;

namespace Sabeco_Factsheet.TbUserMappingPersons
{
    public class TbUserMappingPersonsAppService : TbUserMappingPersonsAppServiceBase, ITbUserMappingPersonsAppService
    {
        //<suite-custom-code-autogenerated>
        public TbUserMappingPersonsAppService(ITbUserMappingPersonRepository tbUserMappingPersonRepository, TbUserMappingPersonManager tbUserMappingPersonManager, IDistributedCache<TbUserMappingPersonDownloadTokenCacheItem, string> downloadTokenCache)
            : base(tbUserMappingPersonRepository, tbUserMappingPersonManager, downloadTokenCache)
        {
        }
        //HQSOFT's generated code:
        public virtual async Task<List<TbUserMappingPersonDto>> GetListNoPagedAsync(GetTbUserMappingPersonsInput input)
        {
            var items = await _tbUserMappingPersonRepository.GetListNoPagedAsync(input.FilterText, input.useridMin, input.useridMax, input.personidMin, input.personidMax, input.IsActive, input.Sorting);

            return ObjectMapper.Map<List<TbUserMappingPerson>, List<TbUserMappingPersonDto>>(items);
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
    }
}