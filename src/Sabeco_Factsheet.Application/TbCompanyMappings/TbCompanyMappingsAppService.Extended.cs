using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using Sabeco_Factsheet.Permissions;
using Sabeco_Factsheet.TbCompanyMappings;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using Sabeco_Factsheet.Shared;
using Sabeco_Factsheet.TbCompanyPersons;

namespace Sabeco_Factsheet.TbCompanyMappings
{
    public class TbCompanyMappingsAppService : TbCompanyMappingsAppServiceBase, ITbCompanyMappingsAppService
    {
        //<suite-custom-code-autogenerated>
        public TbCompanyMappingsAppService(ITbCompanyMappingRepository tbCompanyMappingRepository, TbCompanyMappingManager tbCompanyMappingManager, IDistributedCache<TbCompanyMappingDownloadTokenCacheItem, string> downloadTokenCache)
            : base(tbCompanyMappingRepository, tbCompanyMappingManager, downloadTokenCache)
        {
        }
        //HQSOFT's generated code:
        public virtual async Task<List<TbCompanyMappingDto>> GetListNoPagedAsync(GetTbCompanyMappingsInput input)
        {
            var items = await _tbCompanyMappingRepository.GetListNoPagedAsync(input.FilterText, input.CompanyIdMin, input.CompanyIdMax, input.CompanyTypeShareholdingCode, input.CompanyTypesCode, input.Note, input.crt_dateMin, input.crt_dateMax, input.crt_userMin, input.crt_userMax, input.mod_dateMin, input.mod_dateMax, input.mod_userMin, input.mod_userMax, input.idCompanyTypeShareholdingCodeMin, input.idCompanyTypeShareholdingCodeMax, input.idCompanyTypesCodeMin, input.idCompanyTypesCodeMax, input.Sorting);

            return ObjectMapper.Map<List<TbCompanyMapping>, List<TbCompanyMappingDto>>(items);
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
        public virtual async Task<List<TbCompanyMappingDto>> GetListByCompanyId(int id)
        {
            var items = await _tbCompanyMappingRepository.GetListByCompanyId(id);
            return ObjectMapper.Map<List<TbCompanyMapping>, List<TbCompanyMappingDto>>(items);
        }
    }
}