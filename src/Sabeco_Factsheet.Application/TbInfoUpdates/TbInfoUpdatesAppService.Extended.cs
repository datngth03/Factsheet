using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using Sabeco_Factsheet.Permissions;
using Sabeco_Factsheet.TbInfoUpdates;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using Sabeco_Factsheet.Shared;

namespace Sabeco_Factsheet.TbInfoUpdates
{
    public class TbInfoUpdatesAppService : TbInfoUpdatesAppServiceBase, ITbInfoUpdatesAppService
    {
        //<suite-custom-code-autogenerated>
        public TbInfoUpdatesAppService(ITbInfoUpdateRepository tbInfoUpdateRepository, TbInfoUpdateManager tbInfoUpdateManager, IDistributedCache<TbInfoUpdateDownloadTokenCacheItem, string> downloadTokenCache)
            : base(tbInfoUpdateRepository, tbInfoUpdateManager, downloadTokenCache)
        {
        }
        //HQSOFT's generated code:
        public virtual async Task<List<TbInfoUpdateDto>> GetListNoPagedAsync(GetTbInfoUpdatesInput input)
        {
            var items = await _tbInfoUpdateRepository.GetListNoPagedAsync(input.FilterText, input.TableName, input.ColumnName, input.ScreenName, input.ScreenIdMin, input.ScreenIdMax, input.RowIdMin, input.RowIdMax, input.Command, input.GroupName, input.LastValue, input.NewValue, input.DocStatusMin, input.DocStatusMax, input.Comment, input.IsActiveMin, input.IsActiveMax, input.crt_userMin, input.crt_userMax, input.crt_dateMin, input.crt_dateMax, input.mod_userMin, input.mod_userMax, input.mod_dateMin, input.mod_dateMax, input.ChangeSetId, input.TimeAssessmentMin, input.TimeAssessmentMax, input.IsVisible, input.Sorting);

            return ObjectMapper.Map<List<TbInfoUpdate>, List<TbInfoUpdateDto>>(items);
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
    }
}