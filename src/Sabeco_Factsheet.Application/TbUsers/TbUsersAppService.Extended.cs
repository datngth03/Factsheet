using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using Sabeco_Factsheet.Permissions;
using Sabeco_Factsheet.TbUsers;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using Sabeco_Factsheet.Shared;

namespace Sabeco_Factsheet.TbUsers
{
    public class TbUsersAppService : TbUsersAppServiceBase, ITbUsersAppService
    {
        //<suite-custom-code-autogenerated>
        public TbUsersAppService(ITbUserRepository tbUserRepository, TbUserManager tbUserManager, IDistributedCache<TbUserDownloadTokenCacheItem, string> downloadTokenCache)
            : base(tbUserRepository, tbUserManager, downloadTokenCache)
        {
        }
        //HQSOFT's generated code:
        public virtual async Task<List<TbUserDto>> GetListNoPagedAsync(GetTbUsersInput input)
        {
            var items = await _tbUserRepository.GetListNoPagedAsync(input.FilterText, input.UserPrincipalName, input.UserName, input.FullName, input.Email, input.CompanyIdMin, input.CompanyIdMax, input.DocStatusMin, input.DocStatusMax, input.IsActive, input.crt_dateMin, input.crt_dateMax, input.crt_userMin, input.crt_userMax, input.mod_dateMin, input.mod_dateMax, input.mod_userMin, input.mod_userMax, input.AbpUserId, input.Sorting);

            return ObjectMapper.Map<List<TbUser>, List<TbUserDto>>(items);
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
        public virtual async Task<List<TbUserDto>> GetListByAbpUserId(Guid? userName)
        {
            var items = await _tbUserRepository.GetListByAbpUserId(userName);
            return ObjectMapper.Map<List<TbUser>, List<TbUserDto>>(items);
        } 

        public async Task<TbUserDto?> GetByAbpUserIdAsync(Guid? abpUserId)
        {
            var item = await _tbUserRepository.GetByAbpUserIdAsync(abpUserId);

            if (item == null)
            {
                return null;
            }

            return ObjectMapper.Map<TbUser, TbUserDto>(item);
        }

    }
}