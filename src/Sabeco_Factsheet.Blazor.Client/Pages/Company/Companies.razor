@page "/companies/{Id}"

@attribute [Authorize(Sabeco_FactsheetPermissions.TbCompanies.Default)]

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.Components
@using DevExpress.Blazor

@using Sabeco_Factsheet.TbUserMappingCompanies
@using Sabeco_Factsheet.TbUserMappingPersons
@using Sabeco_Factsheet.Blazor.Client.Pages.AttachmentFile
@using Sabeco_Factsheet.Blazor.Client.Pages.History
@using Sabeco_Factsheet.EnumList
@using Sabeco_Factsheet.TbUsers
@using Sabeco_Factsheet.TbCompanies
@using Sabeco_Factsheet.TbAdditionInfos
@using Sabeco_Factsheet.TbAdditionInfoTemps
@using Sabeco_Factsheet.TbCompanyBusinesses
@using Sabeco_Factsheet.TbCompanyMajors
@using Sabeco_Factsheet.TbCompanyMajorTemps
@using Sabeco_Factsheet.TbCompanyInvests
@using Sabeco_Factsheet.TbCompanyInvestTemps
@using Sabeco_Factsheet.TbCompanyPersons
@using Sabeco_Factsheet.TbCompanyPersonTemps
@using Sabeco_Factsheet.TbCompanyMappings
@using Sabeco_Factsheet.TbCompanyMappingTemps
@using Sabeco_Factsheet.TbFileUploads
@using Sabeco_Factsheet.TbFileUploadTemps
@using Sabeco_Factsheet.TbInfoUpdates
@using Sabeco_Factsheet.TbLandInfos
@using Sabeco_Factsheet.TbLandInfoTemps
@using Sabeco_Factsheet.TbPersons
@using Sabeco_Factsheet.TbPositions
@using Sabeco_Factsheet.TsClasses
@using Sabeco_Factsheet.Localization
@using Sabeco_Factsheet.Shared
@using Sabeco_Factsheet.Permissions



@using Volo.Abp.Identity
@using Volo.Abp.Http.Client
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.ObjectMapping
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Progression
@using Volo.Abp.AspNetCore.Components.BlockUi
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.AspNetCore.Components.Web.Theming.PageToolbars

@inherits Sabeco_FactsheetComponentBase
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

@inject IUiMessageService _uiMessageService
@inject IUiNotificationService _uiNotificationService
@inject IBlockUiService _blockUiService
@inject IUiPageProgressService _pageProgressService

@inject ITbUsersAppService TbUsersAppService
@inject ITbInfoUpdatesAppService InfoUpdatesAppService
@inject ITbAdditionInfosAppService TbAdditionInfosAppService
@inject ITbUserMappingPersonsAppService TbUserMappingPersonsAppService
@inject ITbUserMappingCompaniesAppService TbUserMappingCompaniesAppService
@inject ITbAdditionInfoTempsAppService TbAdditionInfoTempsAppService
@inject ITbCompaniesAppService TbCompaniesAppService
@inject ITbCompanyBusinessesAppService TbCompanyBusinessesAppService
@inject ITbCompanyMajorsAppService TbCompanyMajorsAppService
@inject ITbCompanyMajorTempsAppService TbCompanyMajorTempsAppService
@inject ITbCompanyInvestsAppService TbCompanyInvestsAppService
@inject ITbCompanyInvestTempsAppService TbCompanyInvestTempsAppService
@inject ITbCompanyMappingsAppService TbCompanyMappingsAppService
@inject ITbCompanyMappingTempsAppService TbCompanyMappingTempsAppService
@inject ITbFileUploadsAppService TbFileUploadsAppService
@inject ITbFileUploadTempsAppService TbFileUploadTempsAppService
@inject ITbLandInfosAppService TbLandInfosAppService
@inject ITbLandInfoTempsAppService TbLandInfoTempsAppService
@inject IUiMessageService uiMessageService
@inject IPageProgressService PageProgressService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject ITbPersonsAppService TbPersonsAppService
@inject ITbPositionsAppService TbPositionsAppService
@inject ITbCompanyPersonTempsAppService TbCompanyPersonTempsAppService
@inject ITbCompanyPersonsAppService TbCompanyPersonsAppService
@inject ITsClassesAppService TsClassesAppService
@inject ITbInfoUpdatesAppService TbInfoUpdatesAppService
@inject ITbCompanyMappingsAppService TbCompanyMappingsAppService

    @* ************************* PAGE HEADER ************************* *@

@{
    string code = string.Empty;
    if (EditingCompany.Code != null)
    {
        code = EditingCompany.Code.Length > 15 ? EditingCompany.Code.Substring(0, 15) + "..." : EditingCompany.Code;
    }
}
<PageHeader Title="@(code + (isDataEntryChanged ? " (*)":""))" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">
    <p></p>
</PageHeader>

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />




<Row>
    <!-- Nội dung của Column 1 -->
    <Column ColumnSize="ColumnSize.Is12" style="@($"display:{(isColumn1Visible ? "block" : "none")};")">

        @* ************************* Edit Form Section ************************* *@
        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">
                        @******************************************** SalesRoute ***********************************@

                        <DxFormLayoutItem Caption="@L["Code"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.Code"
                                       TextExpression="@(() => EditingCompany.Code)"
                                       TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.Code = newValue;
															})"
                                       Enabled="false" BindValueMode="BindValueMode.OnLostFocus"
                                       InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.Code)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["BriefName"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.BriefName"
                                       TextExpression="@(() => EditingCompany.BriefName)"
                                       TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.BriefName = newValue;
															})"
                                       BindValueMode="BindValueMode.OnLostFocus"
                                       InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.BriefName)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["Name"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.Name" Enabled="false"
                                       TextExpression="@(() => EditingCompany.Name)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.Name = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.Name)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["Name_EN"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.Name_EN"
                                       TextExpression="@(() => EditingCompany.Name_EN)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.Name_EN = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.Name_EN)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ContactInfo_01"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.ContactInfo_01"
                                       TextExpression="@(() => EditingCompany.ContactInfo_01)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactInfo_01 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.ContactInfo_01)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ContactInfo_05"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.ContactInfo_05"
                                       TextExpression="@(() => EditingCompany.ContactInfo_05)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactInfo_05 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.ContactInfo_05)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ContactInfo_02"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.ContactInfo_02"
                                       TextExpression="@(() => EditingCompany.ContactInfo_02)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactInfo_02 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.ContactInfo_02)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ContactInfo_03"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.ContactInfo_03"
                                       TextExpression="@(() => EditingCompany.ContactInfo_03)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactInfo_03 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.ContactInfo_03)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ContactInfo_04"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.ContactInfo_04"
                                       TextExpression="@(() => EditingCompany.ContactInfo_04)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactInfo_04 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.ContactInfo_04)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ContactInfo_06"]" ColSpanLg="4" ColSpanMd="12">
                            <DxTextBox Text="@EditingCompany.ContactInfo_06"
                                       TextExpression="@(() => EditingCompany.ContactInfo_06)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactInfo_06 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                            <ValidationMessage For="@(() => EditingCompany.ContactInfo_06)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["DirectShareholding"]" ColSpanLg="4" ColSpanMd="12">
                            <DxSpinEdit Value="@EditingCompany.DirectShareholding" Mask="P2"
                                        ValueExpression="@(() => EditingCompany.DirectShareholding)"
                                        ValueChanged="@((Decimal? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.DirectShareholding = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus"
                                        InputCssClass="focus-value" ShowValidationIcon="true" ShowSpinButtons="false" />
                            <ValidationMessage For="@(() => EditingCompany.DirectShareholding)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ConsolidatedShareholding"]" ColSpanLg="4" ColSpanMd="12">
                            <DxSpinEdit Value="@EditingCompany.ConsolidatedShareholding" Mask="P2"
                                        ValueExpression="@(() => EditingCompany.ConsolidatedShareholding)"
                                        ValueChanged="@((Decimal? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ConsolidatedShareholding = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus"
                                        InputCssClass="focus-value" ShowValidationIcon="true" ShowSpinButtons="false" />
                            <ValidationMessage For="@(() => EditingCompany.ConsolidatedShareholding)" />
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["ParentCompany"]" ColSpanLg="4" ColSpanMd="12">
                            <DxComboBox TData="TbCompanyDto" TValue="int" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        Data="@CompanyList" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        ValueFieldName="@nameof(TbCompanyDto.Id)"
                                        TextFieldName="@nameof(TbCompanyDto.Code)"
                                        Value="@EditingCompany.ParentId"
                                        ValueExpression="(()=>EditingCompany.ParentId)"
                                        ValueChanged="@(async (int newValue) =>await CompanyParentChanged(newValue))"
                                        InputCssClass="focus-value"
                                        ShowValidationIcon="true" EditFormat="{0} - {1}" DisplayFormat="{0} - {1}">
                                <Columns>
                                    <DxListEditorColumn Width="20px" FieldName="@nameof(TbCompanyDto.Code)"
                                                        Caption="@L["Code"]" />
                                    <DxListEditorColumn Width="70px" FieldName="@nameof(TbCompanyDto.Name)"
                                                        Caption="@L["Description"]" />
                                </Columns>
                            </DxComboBox>
                            <ValidationMessage For="@(() => EditingCompany.ParentId)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem ColSpanLg="4" ColSpanMd="12">
                        </DxFormLayoutItem>


                        <DxFormLayoutItem ColSpanLg="4" ColSpanMd="12">
                        </DxFormLayoutItem>


                        <DxFormLayoutItem Caption="@L["IsPublicCompany"]" ColSpanLg="4" ColSpanMd="12">
                            <DxCheckBox Checked="@EditingCompany.IsPublicCompany"
                                        CheckedExpression="@(() => EditingCompany.IsPublicCompany)"
                                        CheckedChanged="@((bool? newValue) => {
                                                        isDataEntryChanged  = true;
                                                        EditingCompany.IsPublicCompany = newValue;
                                    })">
                            </DxCheckBox>
                            <ValidationMessage For="@(() => EditingCompany.IsPublicCompany)" />
                        </DxFormLayoutItem>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @************************************** Bussiness Registration ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["BussinessRegistration"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["BussinessRegistration"]</Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxFormLayoutItem Caption="@L["EnterpriseRegistrationCertificate"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.License"
                                               TextExpression="@(() => EditingCompany.License)"
                                               TextChanged="@((newValue) => {
                                                                    isDataEntryChanged  = true;
                                                                    EditingCompany.License = newValue;
															        })"
                                               BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.License)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["EnterpriseRegistrationDate"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxDateEdit Date="@EditingCompany.RegistrationDate"
                                                DateExpression="@(() => EditingCompany.RegistrationDate)"
                                                DateChanged="@(async (DateTime? newValue) => {
                                                      isDataEntryChanged  = true;
                                                    EditingCompany.RegistrationDate = newValue;})"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.RegistrationDate)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["LastestAmendment"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxDateEdit Date="@EditingCompany.LatestAmendment"
                                                DateExpression="@(() => EditingCompany.LatestAmendment)"
                                                DateChanged="@(async (DateTime? newValue) => {
                                                    isDataEntryChanged  = true;
                                                    EditingCompany.LatestAmendment = newValue;})"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.LatestAmendment)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["Amendment"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxSpinEdit Value="@EditingCompany.RegistrationOrder"
                                                ValueExpression="@(() => EditingCompany.RegistrationOrder)"
                                                ValueChanged="@(async (byte? newValue) => { await AmendmentChanged(newValue);})"
                                                BindValueMode="BindValueMode.OnInput"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true"
                                                @onblur="@(async () => { isAmendmentValidation = false; await InvokeAsync(StateHasChanged); })" />
                                    <ValidationMessage For="@(() => EditingCompany.RegistrationOrder)" />
                                    @if (isAmendmentValidation)
                                    {
                                        <a style="color:blue; font-size:0.7rem;">@L["The value must be between 0 and 255"]</a>
                                    }
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["LegalRepresentative"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.LegalRepresent"
                                               TextExpression="@(() => EditingCompany.LegalRepresent)"
                                               TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.LegalRepresent = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.LegalRepresent)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["MajorBusiness"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompanyBusiness.MajorBusiness"
                                               TextExpression="@(() => EditingCompanyBusiness.MajorBusiness)"
                                               TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompanyBusiness.MajorBusiness = newValue;
                                                            isCompanyMajorBusiness = true;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompanyBusiness.MajorBusiness)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["OtherActivity"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompanyBusiness.OtherActivity"
                                               TextExpression="@(() => EditingCompanyBusiness.OtherActivity)"
                                               TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompanyBusiness.OtherActivity = newValue;
                                                            isCompanyMajorBusiness = true;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompanyBusiness.OtherActivity)" />
                                </DxFormLayoutItem>

                            </Items>
                        </DxFormLayoutGroup>

                        <div class="row" style="display:contents"><Divider DividerType="DividerType.Solid" /> </div>

                        @************************************** Company Type ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["CompanyType"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["CompanyType"]</Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxFormLayoutItem ColSpanLg="4" ColSpanMd="12">
                                    <DxComboBox Data="@TypeClassList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                Value="@EditingCompanyType.idCompanyType"
                                                ValueExpression="(() => EditingCompanyType.idCompanyType)"
                                                ValueChanged="@(async (int? newValue) => await CompanyTypeChanged(newValue))"
                                                ValueFieldName="@nameof(TsClassDto.Id)"
                                                TextFieldName="@nameof(TsClassDto.Name)"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true">
                                    </DxComboBox>
                                    <ValidationMessage For="@(() => EditingCompanyType.idCompanyType)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem ColSpanLg="4" ColSpanMd="12">
                                    <DxComboBox Data="@ReportKindClassList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                Value="@EditingCompanyTypeReportKind.idCompanyTypesCode"
                                                ValueExpression="(() => EditingCompanyTypeReportKind.idCompanyTypesCode)"
                                                ValueChanged="@(async (int? newValue) => await CompanyTypeReportKindChanged(newValue))"
                                                ValueFieldName="@nameof(TsClassDto.Id)"
                                                TextFieldName="@nameof(TsClassDto.Name)"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true">
                                    </DxComboBox>
                                    <ValidationMessage For="@(() => EditingCompanyTypeReportKind.Id)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem ColSpanLg="4" ColSpanMd="12">
                                    <DxComboBox Data="@ReportClassList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                Value="EditingCompanyTypeReport.idCompanyTypeShareholdingCode"
                                                ValueExpression="(() => EditingCompanyTypeReport.idCompanyTypeShareholdingCode)"
                                                ValueChanged="@(async (int? newValue) => await CompanyTypeReportChanged(newValue))"
                                                ValueFieldName="@nameof(TsClassDto.Id)"
                                                TextFieldName="@nameof(TsClassDto.Name)"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true">
                                    </DxComboBox>
                                    <ValidationMessage For="@(() => EditingCompanyTypeReport.Id)" />
                                </DxFormLayoutItem>

                            </Items>
                        </DxFormLayoutGroup>

                        <div class="row" style="display:contents"><Divider DividerType="DividerType.Solid" /> </div>

                        @******************************************** ShareInformation ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["ShareInformation"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["ShareInformation"]</Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>
                                <DxFormLayoutItem Caption="@L["VotingRightDirect"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxSpinEdit Value="@EditingCompany.VotingRightDirect" Mask="#,###,###,###,###,##0.00"
                                                ValueExpression="@(() => EditingCompany.VotingRightDirect)" ValueChanged="@((Decimal? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.VotingRightDirect = newValue;
															})" ShowSpinButtons="false"
                                                BindValueMode="BindValueMode.OnLostFocus"
                                                InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.VotingRightDirect)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["VotingRightTotal"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxSpinEdit Value="@EditingCompany.VotingRightTotal" Mask="#,###,###,###,###,##0.00"
                                                ValueExpression="@(() => EditingCompany.VotingRightTotal)" ValueChanged="@((Decimal? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.VotingRightTotal = newValue;
															})" ShowSpinButtons="false"
                                                BindValueMode="BindValueMode.OnLostFocus"
                                                InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.VotingRightTotal)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["StockExchange"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxComboBox Data="@StockCodeClassList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                Value="@(EditingCompany.StockExchange)"
                                                ValueExpression="(() => EditingCompany.StockExchange)"
                                                ValueChanged="@(async (string newValue) => await StockExchangeChanged(newValue))"
                                                ValueFieldName="@nameof(TsClassDto.Code)"
                                                TextFieldName="@nameof(TsClassDto.Code)"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true">
                                    </DxComboBox>
                                    <ValidationMessage For="@(() => EditingCompany.StockExchange)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["StockCode"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.StockCode"
                                               TextExpression="@(() => EditingCompany.StockCode)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.StockCode = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.StockCode)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["StockRegistrationDate"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxDateEdit Date="@EditingCompany.StockRegistrationDate"
                                                DateExpression="@(() => EditingCompany.StockRegistrationDate)"
                                                DateChanged="@(async (DateTime? newValue) => {EditingCompany.StockRegistrationDate = newValue;})"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.StockRegistrationDate)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["CharteredCapital"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxSpinEdit Value="@EditingCompany.CharteredCapital" Mask="#,###,###,###,###,##0.00"
                                                ValueExpression="@(() => EditingCompany.CharteredCapital)"
                                                ValueChanged="@((Decimal? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.CharteredCapital = newValue;
                                                        })" ShowSpinButtons="false"
                                                BindValueMode="BindValueMode.OnLostFocus"
                                                InputCssClass="focus-value"
                                                ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.CharteredCapital)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["ParValue"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxSpinEdit Value="@EditingCompany.ParValue" ShowSpinButtons="false"
                                                ValueExpression="@(() => EditingCompany.ParValue)"
                                                ValueChanged="@((int? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ParValue = newValue;
															})" BindValueMode="BindValueMode.OnDelayedInput"
                                                InputCssClass="focus-value" ShowValidationIcon="true" MinValue="0" />
                                    <ValidationMessage For="@(() => EditingCompany.ParValue)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["TotalShare"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxSpinEdit Value="@EditingCompany.TotalShare" ShowSpinButtons="false" Mask="#,###,###,###,###,##0.00"
                                                ValueExpression="@(() => EditingCompany.TotalShare)"
                                                ValueChanged="@((Decimal? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.TotalShare = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus"
                                                InputCssClass="focus-value" ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.TotalShare)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["ListedShare"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxSpinEdit Value="@EditingCompany.ListedShare" ShowSpinButtons="false" Mask="#,###,###,###,###,##0.00"
                                                ValueExpression="@(() => EditingCompany.ListedShare)" ValueChanged="@((Decimal? newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ListedShare = newValue; })"
                                                BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.ListedShare)" />
                                </DxFormLayoutItem>

                            </Items>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** Board of Directors (BOD) ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["BoardOfDirectors(BOD)"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["BoardOfDirectors(BOD)"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="CompanyPersonGridNew_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateCompanyPerson|| CanEditCompanyPerson)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>
                                <DxGrid @ref="CompanyPersonGrid" Data="@CompanyPersonBODList"
                                        @bind-SelectedDataItems="@selectedCompanyPerson"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="CompanyPersonGrid_OnCustomizeEditModel"
                                        EditModelSaving="CompanyPersonGrid_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@BODPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="BODChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@BODPageSize" PagerVisibleNumericButtonCount="@BODPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                            <EditSettings>
                                                <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="true" />
                                            </EditSettings>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonId)" Caption="@L["FULLNAME"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    if (context.Value != null)
                                                    {
                                                        var value = (int)context.Value;
                                                        var personName = PersonsList != null ? PersonsList.FirstOrDefault(x => x.Id == value)?.FullName : null;
                                                        <a>@(personName ?? "")</a>
                                                    }
                                                    else
                                                    {
                                                        <a>none</a>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueChanged="@(async (int newValue) => await FullNameChanged(newValue))"
                                                            TextFieldName="@nameof(TbPersonDto.FullName)"
                                                            ValueFieldName="@nameof(TbPersonDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PositionId)" Caption="@L["POSITION"]" DataRowEditorVisible="false">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = (int?)context.Value;

                                                    if (value == 0)
                                                    {
                                                        <a>none</a>
                                                    }
                                                    else
                                                    {
                                                        var positionBOD = PositionBODList.FirstOrDefault(x => x.Id == value)?.Name;
                                                        <a>@positionBOD</a>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PositionBODList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueChanged="@(async (int newValue) => await PositionBODChanged(newValue))"
                                                            TextFieldName="@nameof(TbPositionDto.Name)"
                                                            ValueFieldName="@nameof(TbPositionDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalValue)" Caption="@L["PERSONALSHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalSharePercentage)" Caption="@L["PERSONALSHAREPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.OwnerValue)" Caption="@L["REPRESENTATIVESHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.RepresentativePercentage)" Caption="@L["REPRESENTATIVEPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.Note)" Caption="@L["REP.FROMSABECO"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = context.Value?.ToString();

                                                    if (value == "Yes")
                                                    {
                                                        <Badge Color="Color.Success">@L["Yes"]</Badge>
                                                    }
                                                    else if (value == "No")
                                                    {
                                                        <Badge Color="Color.Danger">@L["No"]</Badge>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            ValueExpression="(() => ((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                            ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                            ValueChanged="@(async (string newValue) => await OnYesNoChanged(newValue))"
                                                            InputCssClass="focus-value"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => CompanyPersonGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRow" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>

                                    @*======================= SALES ROUTE MASTER GRID - POPUP EDIT FORM =========================*@
                                    <EditFormTemplate Context="EditFormPopupContext">
                                        @{
                                            EditingCompanyPerson = (TbCompanyPersonUpdateDto)EditFormPopupContext.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@(L["FullName"])" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPerson.PersonId)"
                                                                    ValueExpression="(() => EditingCompanyPerson.PersonId)"
                                                                    ValueChanged="@(async (int newValue) => await FullNameChanged(newValue))"
                                                                    TextFieldName="@nameof(TbPersonDto.FullName)"
                                                                    ValueFieldName="@nameof(TbPersonDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="(() => EditingCompanyPerson.PersonId)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Position"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PositionBODList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPerson.PositionId)"
                                                                    ValueExpression="(() => EditingCompanyPerson.PositionId)"
                                                                    ValueChanged="@(async (int newValue) => await PositionBODChanged(newValue))"
                                                                    TextFieldName="@nameof(TbPositionDto.Name)"
                                                                    ValueFieldName="@nameof(TbPositionDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="(() => EditingCompanyPerson.PositionId)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["FromDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPerson.FromDate"
                                                                    DateExpression="@(()=>EditingCompanyPerson.FromDate)"
                                                                    DateChanged="@((DateTime? e) => {
																					if(EditingCompanyPerson.FromDate != null || e != null)
																					{
																						isDataEntryChanged  = true;
																						EditingCompanyPerson.FromDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["ToDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPerson.ToDate"
                                                                    DateExpression="@(()=>EditingCompanyPerson.ToDate)"
                                                                    DateChanged="@((DateTime? e) => {
																										if(EditingCompanyPerson.ToDate != null || e != null)
																										{
																											isDataEntryChanged  = true;
																											EditingCompanyPerson.ToDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPerson.PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPerson.PersonalValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPerson.PersonalValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="(() => EditingCompanyPerson.PersonalValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalSharePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPerson.PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPerson.PersonalSharePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPerson.PersonalSharePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" ShowSpinButtons="false" />
                                                        <ValidationMessage For="(() => EditingCompanyPerson.PersonalSharePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativeShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPerson.OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPerson.OwnerValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPerson.OwnerValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="(() => EditingCompanyPerson.OwnerValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPerson.RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPerson.RepresentativePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPerson.RepresentativePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" ShowSpinButtons="false" />
                                                        <ValidationMessage For="(() => EditingCompanyPerson.RepresentativePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Rep.FromSabeco"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPerson.Note)"
                                                                    ValueExpression="(() => EditingCompanyPerson.Note)"
                                                                    TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                                    ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                                    ValueChanged="@(async (string newValue) => {
                                                                                     await OnYesNoChanged(newValue); })"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="(() => EditingCompanyPerson.Note)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => CompanyPersonGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveCompanyPersonBODAsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>
                                </DxGrid>
                            </Items>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** Tab Board Of Management (BOM) ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["BoardOfManagement(BOM)"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["BoardOfManagement(BOM)"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="CompanyPersonBOMGridNew_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateCompanyPersonBOM|| CanEditCompanyPersonBOM)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxGrid @ref="CompanyPersonBOMGrid" Data="@CompanyPersonBOMList"
                                        @bind-SelectedDataItems="@selectedCompanyPerson"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="CompanyPersonGridBOM_OnCustomizeEditModel"
                                        EditModelSaving="CompanyPersonGridBOM_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@BOMPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="BOMChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@BOMPageSize" PagerVisibleNumericButtonCount="@BOMPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                            <EditSettings>
                                                <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="true" />
                                            </EditSettings>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonId)" Caption="@L["FULLNAME"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    if (context.Value != null)
                                                    {
                                                        var value = (int)context.Value;
                                                        var personName = PersonsList != null ? PersonsList.FirstOrDefault(x => x.Id == value)?.FullName : null;
                                                        <a>@(personName ?? "")</a>
                                                    }
                                                    else
                                                    {
                                                        <a>none</a>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueChanged="@(async (int newValue) => await FullNameChangedBOM(newValue))"
                                                            TextFieldName="@nameof(TbPersonDto.FullName)"
                                                            ValueFieldName="@nameof(TbPersonDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PositionId)" Caption="@L["POSITION"]" DataRowEditorVisible="false">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = (int?)context.Value;

                                                    if (value == 0)
                                                    {
                                                        <a>none</a>
                                                    }
                                                    else
                                                    {
                                                        var positionBOMList = PositionBOMList.FirstOrDefault(x => x.Id == value)?.Name;
                                                        <a>@positionBOMList</a>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PositionBOMList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueChanged="@(async (int newValue) => await PositionBOMChanged(newValue))"
                                                            TextFieldName="@nameof(TbPositionDto.Name)"
                                                            ValueFieldName="@nameof(TbPositionDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalValue)" Caption="@L["PERSONALSHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue = newValue; isDataEntryChanged  = true;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalSharePercentage)" Caption="@L["PERSONALSHAREPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage = newValue; isDataEntryChanged  = true;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.OwnerValue)" Caption="@L["REPRESENTATIVESHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue = newValue; isDataEntryChanged  = true;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.RepresentativePercentage)" Caption="@L["REPRESENTATIVEPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage = newValue; isDataEntryChanged  = true;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.Note)" Caption="@L["REP.FROMSABECO"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = context.Value?.ToString();

                                                    if (value == "Yes")
                                                    {
                                                        <Badge Color="Color.Success">@L["Yes"]</Badge>
                                                    }
                                                    else if (value == "No")
                                                    {
                                                        <Badge Color="Color.Danger">@L["No"]</Badge>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            ValueExpression="(() => ((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                            ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                            ValueChanged="@(async (string newValue) => await OnYesNoChangedBOM(newValue))"
                                                            InputCssClass="focus-value"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => CompanyPersonBOMGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRowBOM" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>

                                    @*======================= SALES ROUTE MASTER GRID - POPUP EDIT FORM =========================*@
                                    <EditFormTemplate Context="EditFormPopupContext">
                                        @{
                                            EditingCompanyPersonBOM = (TbCompanyPersonUpdateDto)EditFormPopupContext.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@(L["FullName"])" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonBOM.PersonId)"
                                                                    ValueExpression="(() => EditingCompanyPersonBOM.PersonId)"
                                                                    ValueChanged="@(async (int newValue) => await FullNameChangedBOM(newValue))"
                                                                    TextFieldName="@nameof(TbPersonDto.FullName)"
                                                                    ValueFieldName="@nameof(TbPersonDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOM.PersonId)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Position"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PositionBOMList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonBOM.PositionId)"
                                                                    ValueExpression="(() => EditingCompanyPersonBOM.PositionId)"
                                                                    ValueChanged="@(async (int newValue) => await PositionBOMChanged(newValue))"
                                                                    TextFieldName="@nameof(TbPositionDto.Name)"
                                                                    ValueFieldName="@nameof(TbPositionDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="(() => EditingCompanyPersonBOM.PositionId)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["FromDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPersonBOM.FromDate"
                                                                    DateExpression="@(()=>EditingCompanyPersonBOM.FromDate)"
                                                                    DateChanged="@((DateTime? e) => {
																										if(EditingCompanyPersonBOM.FromDate != null || e != null)
																										{
																											isDataEntryChanged  = true;
																											EditingCompanyPersonBOM.FromDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["ToDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPersonBOM.ToDate"
                                                                    DateExpression="@(()=>EditingCompanyPersonBOM.ToDate)"
                                                                    DateChanged="@((DateTime? e) => {
																										if(EditingCompanyPerson.ToDate != null || e != null)
																										{
																											isDataEntryChanged  = true;
																											EditingCompanyPersonBOM.ToDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy"
                                                                     />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOM.PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOM.PersonalValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOM.PersonalValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="(() => EditingCompanyPersonBOM.PersonalValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalSharePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOM.PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOM.PersonalSharePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOM.PersonalSharePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="(() => EditingCompanyPersonBOM.PersonalSharePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativeShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOM.OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOM.OwnerValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOM.OwnerValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="(() => EditingCompanyPersonBOM.OwnerValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOM.RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOM.RepresentativePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOM.RepresentativePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="(() => EditingCompanyPersonBOM.RepresentativePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Rep.FromSabeco"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonBOM.Note)"
                                                                    ValueExpression="(() => EditingCompanyPersonBOM.Note)"
                                                                    TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                                    ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                                    ValueChanged="@(async (string newValue) =>{
                                                                                     isDataEntryChanged =true;
                                                                                     await OnYesNoChangedBOM(newValue); })"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="(() => EditingCompanyPersonBOM.Note)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => CompanyPersonBOMGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveCompanyBOMPersonsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>
                                </DxGrid>
                            </Items>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** Tab Board Of Supervisors (BOS) ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["BoardOfSupervisors(BOS)"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["BoardOfSupervisors(BOS)"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="CompanyPersonBOSGridNew_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateCompanyPersonBOS|| CanEditCompanyPersonBOS)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxGrid @ref="CompanyPersonBOSGrid" Data="@CompanyPersonBOSList"
                                        @bind-SelectedDataItems="@selectedCompanyPerson"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="CompanyPersonGridBOS_OnCustomizeEditModel"
                                        EditModelSaving="CompanyPersonGridBOS_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@BOSPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="BOSChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@BOSPageSize" PagerVisibleNumericButtonCount="@BOSPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                            <EditSettings>
                                                <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="true" />
                                            </EditSettings>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonId)" Caption="@L["FULLNAME"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    if (context.Value != null)
                                                    {
                                                        var value = (int)context.Value;
                                                        var personName = PersonsList != null ? PersonsList.FirstOrDefault(x => x.Id == value)?.FullName : null;
                                                        <a>@(personName ?? "")</a>
                                                    }
                                                    else
                                                    {
                                                        <a>none</a>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueChanged="@(async (int newValue) => await FullNameChangedBOS(newValue))"
                                                            TextFieldName="@nameof(TbPersonDto.FullName)"
                                                            ValueFieldName="@nameof(TbPersonDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PositionId)" Caption="@L["POSITION"]" DataRowEditorVisible="false">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = (int?)context.Value;

                                                    if (value == 0)
                                                    {
                                                        <a>none</a>
                                                    }
                                                    else
                                                    {
                                                        var positionBOSList = PositionBOSList.FirstOrDefault(x => x.Id == value)?.Name;
                                                        <a>@positionBOSList</a>

                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PositionBOSList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueChanged="@(async (int newValue) => await PositionBOSChanged(newValue))"
                                                            TextFieldName="@nameof(TbPositionDto.Name)"
                                                            ValueFieldName="@nameof(TbPositionDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalValue)" Caption="@L["PERSONALSHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue = newValue; isDataEntryChanged  = true;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalSharePercentage)" Caption="@L["PERSONALSHAREPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage = newValue; isDataEntryChanged  = true;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.OwnerValue)" Caption="@L["REPRESENTATIVESHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue = newValue; isDataEntryChanged  = true;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.RepresentativePercentage)" Caption="@L["REPRESENTATIVEPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage = newValue; isDataEntryChanged  = true;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.Note)" Caption="@L["REP.FROMSABECO"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = context.Value?.ToString();

                                                    if (value == "Yes")
                                                    {
                                                        <Badge Color="Color.Success">@L["Yes"]</Badge>
                                                    }
                                                    else if (value == "No")
                                                    {
                                                        <Badge Color="Color.Danger">@L["No"]</Badge>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            ValueExpression="(() => ((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                            ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                            ValueChanged="@(async (string newValue) => await OnYesNoChangedBOS(newValue))"
                                                            InputCssClass="focus-value"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => CompanyPersonBOSGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRowBOS" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>

                                    @*======================= SALES ROUTE MASTER GRID - POPUP EDIT FORM =========================*@
                                    <EditFormTemplate Context="EditFormPopupContext">
                                        @{
                                            EditingCompanyPersonBOS = (TbCompanyPersonUpdateDto)EditFormPopupContext.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@(L["FullName"])" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonBOS.PersonId)"
                                                                    ValueExpression="(() => EditingCompanyPersonBOS.PersonId)"
                                                                    ValueChanged="@(async (int newValue) => await FullNameChangedBOS(newValue))"
                                                                    TextFieldName="@nameof(TbPersonDto.FullName)"
                                                                    ValueFieldName="@nameof(TbPersonDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOS.PersonId)" />
                                                    </DxFormLayoutItem>


                                                    <DxFormLayoutItem Caption="@L["Position"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PositionBOSList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonBOS.PositionId)"
                                                                    ValueExpression="(() => EditingCompanyPersonBOS.PositionId)"
                                                                    ValueChanged="@(async (int newValue) => await PositionBOSChanged(newValue))"
                                                                    TextFieldName="@nameof(TbPositionDto.Name)"
                                                                    ValueFieldName="@nameof(TbPositionDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOS.PositionId)" />
                                                    </DxFormLayoutItem>



                                                    <DxFormLayoutItem Caption="@L["FromDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPersonBOS.FromDate"
                                                                    DateExpression="@(()=>EditingCompanyPersonBOS.FromDate)"
                                                                    DateChanged="@((DateTime? e) => {
																										if(EditingCompanyPersonBOS.FromDate != null || e != null)
																										{
																											isDataEntryChanged  = true;
																											EditingCompanyPersonBOS.FromDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["ToDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPersonBOS.ToDate"
                                                                    DateExpression="@(()=>EditingCompanyPersonBOS.ToDate)"
                                                                    DateChanged="@((DateTime? e) => {
																										if(EditingCompanyPersonBOS.ToDate != null || e != null)
																										{
																											isDataEntryChanged  = true;
																											EditingCompanyPersonBOS.ToDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy"
                                                                     />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOS.PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOS.PersonalValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOS.PersonalValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOS.PersonalValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalSharePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOS.PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOS.PersonalSharePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOS.PersonalSharePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOS.PersonalSharePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativeShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOS.OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOS.OwnerValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOS.OwnerValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOS.OwnerValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonBOS.RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonBOS.RepresentativePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
                                                                                         isDataEntryChanged =true;
                                                                                         EditingCompanyPersonBOS.RepresentativePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOS.RepresentativePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Rep.FromSabeco"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonBOS.Note)"
                                                                    ValueExpression="(() => EditingCompanyPersonBOS.Note)"
                                                                    TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                                    ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                                    ValueChanged="@(async (string newValue) =>{
                                                                                     isDataEntryChanged =true;
                                                                                     await OnYesNoChangedBOS(newValue); })"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingCompanyPersonBOS.Note)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => CompanyPersonBOSGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveCompanyBOSPersonsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>
                                </DxGrid>
                            </Items>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** Tab Member's Coucil ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["Member’sCouncil"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["Member’sCouncil"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="CompanyPersonTabMemberGridNew_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateCompanyPersonTabMember|| CanEditCompanyPersonTabMember)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxGrid @ref="CompanyPersonTabMemberGrid" Data="@CompanyPersonMemberList"
                                        @bind-SelectedDataItems="@selectedCompanyPerson"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="CompanyPersonGridTabMember_OnCustomizeEditModel"
                                        EditModelSaving="CompanyPersonGridTabMember_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@MemberPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="MemberChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@MemberPageSize" PagerVisibleNumericButtonCount="@MemberPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                            <EditSettings>
                                                <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="true" />
                                            </EditSettings>
                                        </DxGridDataColumn>
                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonId)" Caption="@L["FULLNAME"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    if (context.Value != null)
                                                    {
                                                        var value = (int)context.Value;
                                                        var personName = PersonsList != null ? PersonsList.FirstOrDefault(x => x.Id == value)?.FullName : null;
                                                        <a>@(personName ?? "")</a>
                                                    }
                                                    else
                                                    {
                                                        <a>none</a>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PersonId)"
                                                            ValueChanged="@(async (int newValue) => await FullNameChangedTabMenber(newValue))"
                                                            TextFieldName="@nameof(TbPersonDto.FullName)"
                                                            ValueFieldName="@nameof(TbPersonDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PositionId)" Caption="@L["POSITION"]" DataRowEditorVisible="false">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = (int?)context.Value;

                                                    if (value == 0)
                                                    {
                                                        <a>none</a>
                                                    }
                                                    else
                                                    {
                                                        var positionMemberList = PositionMemberList.FirstOrDefault(x => x.Id == value)?.Name;
                                                        <a>@positionMemberList</a>

                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@PositionMemberList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueExpression="(() =>((TbCompanyPersonUpdateDto)context.EditModel).PositionId)"
                                                            ValueChanged="@(async (int newValue) => await PositionBOSChanged(newValue))"
                                                            TextFieldName="@nameof(TbPositionDto.Name)"
                                                            ValueFieldName="@nameof(TbPositionDto.Id)"
                                                            InputCssClass="focus-value"
                                                            ShowDropDownButton="false"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalValue)" Caption="@L["PERSONALSHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalValue = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.PersonalSharePercentage)" Caption="@L["PERSONALSHAREPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).PersonalSharePercentage = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.OwnerValue)" Caption="@L["REPRESENTATIVESHARE(SHARES)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).OwnerValue = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.RepresentativePercentage)" Caption="@L["REPRESENTATIVEPERCENTAGE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage)"
                                                            ValueChanged="@(async (Decimal? newValue) => { ((TbCompanyPersonUpdateDto)context.EditModel).RepresentativePercentage = newValue;})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyPersonUpdateDto.Note)" Caption="@L["REP.FROMSABECO"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = context.Value?.ToString();

                                                    if (value == "Yes")
                                                    {
                                                        <Badge Color="Color.Success">@L["Yes"]</Badge>
                                                    } 
                                                    else if (value == "No")
                                                    {
                                                        <Badge Color="Color.Danger">@L["No"]</Badge>
                                                    }
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            ValueExpression="(() => ((TbCompanyPersonUpdateDto)context.EditModel).Note)"
                                                            TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                            ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                            ValueChanged="@(async (string newValue) => await OnYesNoChangedTabMember(newValue))"
                                                            InputCssClass="focus-value"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            ShowValidationIcon="true">
                                                </DxComboBox>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => CompanyPersonTabMemberGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRowTabMember" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>

                                    @*======================= SALES ROUTE MASTER GRID - POPUP EDIT FORM =========================*@
                                    <EditFormTemplate Context="EditFormPopupContext">
                                        @{
                                            EditingCompanyPersonMember = (TbCompanyPersonUpdateDto)EditFormPopupContext.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@(L["FullName"])" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PersonsList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonMember.PersonId)"
                                                                    ValueExpression="(() => EditingCompanyPersonMember.PersonId)"
                                                                    ValueChanged="@(async (int newValue) => await FullNameChangedTabMenber(newValue))"
                                                                    TextFieldName="@nameof(TbPersonDto.FullName)"
                                                                    ValueFieldName="@nameof(TbPersonDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingCompanyPersonMember.PersonId)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Position"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@PositionMemberList" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@EditingCompanyPersonMember.PositionId"
                                                                    ValueExpression="(() => EditingCompanyPersonMember.PositionId)"
                                                                    ValueChanged="@(async (int newValue) => await PositionMemberChanged(newValue))"
                                                                    TextFieldName="@nameof(TbPositionDto.Name)"
                                                                    ValueFieldName="@nameof(TbPositionDto.Id)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingCompanyPersonMember.PositionId)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["FromDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPersonMember.FromDate"
                                                                    DateExpression="@(()=>EditingCompanyPersonMember.FromDate)"
                                                                    DateChanged="@((DateTime? e) => {
																										if(EditingCompanyPersonMember.FromDate != null || e != null)
																										{
																											isDataEntryChanged  = true;
																											EditingCompanyPersonMember.FromDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["ToDate"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingCompanyPersonMember.ToDate"
                                                                    DateExpression="@(()=>EditingCompanyPersonMember.ToDate)"
                                                                    DateChanged="@((DateTime? e) => {
																										if(EditingCompanyPersonMember.ToDate != null || e != null)
																										{
																											isDataEntryChanged  = true;
																											EditingCompanyPersonMember.ToDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonMember.PersonalValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonMember.PersonalValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
																						 isDataEntryChanged  = true;
                                                                                         EditingCompanyPersonMember.PersonalValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonMember.PersonalValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["PersonalSharePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonMember.PersonalSharePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonMember.PersonalSharePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
																						 isDataEntryChanged  = true;
                                                                                         EditingCompanyPersonMember.PersonalSharePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonMember.PersonalSharePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativeShare(Shares)"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonMember.OwnerValue)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonMember.OwnerValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
																						 isDataEntryChanged  = true;
                                                                                         EditingCompanyPersonMember.OwnerValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonMember.OwnerValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["RepresentativePercentage"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxSpinEdit Value="@(EditingCompanyPersonMember.RepresentativePercentage)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingCompanyPersonMember.RepresentativePercentage)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {
																						 isDataEntryChanged  = true;
                                                                                         EditingCompanyPersonMember.RepresentativePercentage = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingCompanyPersonMember.RepresentativePercentage)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Rep.FromSabeco"]" ColSpanLg="6" ColSpanMd="12">
                                                        <DxComboBox Data="@YesNoLists" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@(EditingCompanyPersonMember.Note)"
                                                                    ValueExpression="(() => EditingCompanyPersonMember.Note)"
                                                                    TextFieldName="@nameof(YesNoTypeList.DisplayName)"
                                                                    ValueFieldName="@nameof(YesNoTypeList.Value)"
                                                                    ValueChanged="@(async (string newValue) => {
                                                                                     isDataEntryChanged =true;
                                                                                     await OnYesNoChangedTabMember(newValue); })"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingCompanyPersonMember.Note)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => CompanyPersonTabMemberGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveCompanyTabMemberPersonsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>
                                </DxGrid>
                            </Items>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @**************************************** Major shareholder *************************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["MajorShareholder"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["MajorShareholder"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="MajorGrid_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateMajor || CanEditMajor)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxGrid @ref="MajorGrid" Data="@CompanyMajorList"
                                        @bind-SelectedDataItems="@selectedMajor"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="MajorGrid_OnCustomizeEditModel"
                                        EditModelSaving="MajorGrid_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@MajorPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="MajorChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@MajorPageSize" PagerVisibleNumericButtonCount="@MajorPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyMajorUpdateDto.ShareHolderMajor)" Caption="@L["SHAREHOLDERNAME"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderMajor)"
                                                           TextExpression="@(() => ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderMajor)"
                                                           TextChanged="@(async (newValue) => {
																		isDataEntryChanged  = true;
                                                                        ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderMajor = newValue;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyMajorUpdateDto.ShareHolderType)" Caption="@L["SHAREHOLDERTYPE"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    var shareHolderType = (string)context.Value;
                                                    var name = ShareholderCollection.FirstOrDefault(x => x.Code == shareHolderType)?.Name;
                                                    @name
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderType)"
                                                           TextExpression="@(() => ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderType)"
                                                           TextChanged="@(async (newValue) => {
																isDataEntryChanged  = true;
                                                ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderType = newValue;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyMajorUpdateDto.FromDate)" Caption="@L["FROMDATE"]">
                                            <CellEditTemplate>
                                                <DxDateEdit Date="@(((TbCompanyMajorUpdateDto)context.EditModel).FromDate)"
                                                            DateExpression="@(() => ((TbCompanyMajorUpdateDto)context.EditModel).FromDate)"
                                                            DateChanged="@(async (DateTime? newValue) => {
																				isDataEntryChanged  = true;
                                                                                ((TbCompanyMajorUpdateDto)context.EditModel).FromDate = newValue;})"
                                                            InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyMajorUpdateDto.ToDate)" Caption="@L["TODATE"]">
                                            <CellEditTemplate>
                                                <DxDateEdit Date="@(((TbCompanyMajorUpdateDto)context.EditModel).ToDate)"
                                                            DateExpression="@(() => ((TbCompanyMajorUpdateDto)context.EditModel).ToDate)"
                                                            DateChanged="@(async (DateTime? newValue) => {
																											isDataEntryChanged  = true;
                                                            ((TbCompanyMajorUpdateDto)context.EditModel).ToDate = newValue;})"
                                                            InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyMajorUpdateDto.ShareHolderValue)" Caption="@L["SHAREHOLDERVALUE"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderValue)"
                                                            ValueExpression="@(() => ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderValue)"
                                                            ValueChanged="@(async (Decimal? newValue) => {
																											isDataEntryChanged  = true;
                                                                    ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderValue = newValue;
                                                            })" Mask="#,###,###,###,###,##0.00"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyMajorUpdateDto.ShareHolderRate)" Caption="@L["RATE(%)"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderRate)"
                                                            ValueExpression="@(() => ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderRate)"
                                                            ValueChanged="@(async (Decimal? newValue) => {
																											isDataEntryChanged  = true;
                                                ((TbCompanyMajorUpdateDto)context.EditModel).ShareHolderRate = newValue;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" Mask="#,###,###,###,###,##0.00" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyMajorUpdateDto.Note)" Caption="@L["NOTE"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbCompanyMajorUpdateDto)context.EditModel).Note)"
                                                           TextExpression="@(() => ((TbCompanyMajorUpdateDto)context.EditModel).Note)"
                                                           TextChanged="@(async (newValue) => {
																											isDataEntryChanged  = true;
                                                ((TbCompanyMajorUpdateDto)context.EditModel).Note = newValue;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>



                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => MajorGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRow" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>

                                    @*== SALES ROUTE MASTER GRID - POPUP EDIT FORM ====*@
                                    <EditFormTemplate Context="EditFormPopupMajorContext">
                                        @{
                                            EditingMajor = (TbCompanyMajorUpdateDto)EditFormPopupMajorContext.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@L["ShareHolderName"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingMajor.ShareHolderMajor)"
                                                                   TextExpression="@(() => EditingMajor.ShareHolderMajor)"
                                                                   TextChanged="@(async (newValue) => { isDataEntryChanged  = true; EditingMajor.ShareHolderMajor = newValue; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingMajor.ShareHolderMajor)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["FromDate"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingMajor.FromDate"
                                                                    DateExpression="@(()=>EditingMajor.FromDate)"
                                                                    DateChanged="@((DateTime? e) => {
																							if(EditingMajor.FromDate != null || e != null)
																							{
																									isDataEntryChanged  = true;
																									EditingMajor.FromDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy"/>
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["ToDate"]" ColSpanLg="12" ColSpanMd="12">

                                                        <DxDateEdit Date="EditingMajor.ToDate"
                                                                    DateExpression="@(()=>EditingMajor.ToDate)"
                                                                    DateChanged="@((DateTime? e) => {
																								if(EditingMajor.ToDate != null || e != null)
																								{
																										isDataEntryChanged  = true;
																										EditingMajor.ToDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy"/>
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["ShareHolderType"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxComboBox Data="@ShareholderCollection" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@EditingMajor.ShareHolderType"
                                                                    ValueExpression="@(() => EditingMajor.ShareHolderType)"
                                                                    ValueChanged="@((string newValue) => { isDataEntryChanged  = true;
                                                                                            EditingMajor.ShareHolderType = newValue;})"
                                                                    TextFieldName="@nameof(TsClassDto.Name)"
                                                                    ValueFieldName="@nameof(TsClassDto.Code)"
                                                                    InputCssClass="focus-value"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingMajor.ShareHolderType)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["ShareholderValue"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxSpinEdit ShowSpinButtons="false" Mask="#,###,###,###,###,##0.00"
                                                                    Value="@(EditingMajor.ShareHolderValue)"
                                                                    ValueExpression="@(() => EditingMajor.ShareHolderValue)"
                                                                    ValueChanged="@(async (Decimal? newValue) => { isDataEntryChanged  = true; EditingMajor.ShareHolderValue = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingMajor.ShareHolderValue)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Rate(%)"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxSpinEdit ShowSpinButtons="false" Mask="#,###,###,###,###,##0.00"
                                                                    Value="@(EditingMajor.ShareHolderRate)"
                                                                    ValueExpression="@(() => EditingMajor.ShareHolderRate)"
                                                                    ValueChanged="@(async (Decimal? newValue) => { isDataEntryChanged  = true; EditingMajor.ShareHolderRate = newValue; })"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingMajor.ShareHolderRate)" />
                                                    </DxFormLayoutItem>


                                                    <DxFormLayoutItem Caption="@L["Note"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingMajor.Note)" Mask="#,###,###,###,###,##0.00"
                                                                   TextExpression="@(() => EditingMajor.Note)"
                                                                   TextChanged="@(async (newValue) => { isDataEntryChanged  = true; EditingMajor.Note = newValue; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingMajor.Note)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => MajorGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveMajorAsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>
                                </DxGrid>
                            </Items>
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @**************************************** Contact 1 & Contact 2 *********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["Contact1"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["Contact1"]</Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxFormLayoutItem Caption="@L["ContactName1"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactName1"
                                               TextExpression="@(() => EditingCompany.ContactName1)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactName1 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactName1)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["ContactDept1"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactDept1"
                                               TextExpression="@(() => EditingCompany.ContactDept1)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactDept1 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactDept1)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["ContactPosition1"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactPosition1"
                                               TextExpression="@(() => EditingCompany.ContactPosition1)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactPosition1 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />
                                    <ValidationMessage For="@(() => EditingCompany.ContactPosition1)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["ContactPhone1"]" ColSpanLg="4" ColSpanMd="12">

                                    <DxTextBox Text="@EditingCompany.ContactPhone1"
                                               TextExpression="@(() => EditingCompany.ContactPhone1)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactPhone1 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactPhone1)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem Caption="@L["ContactMail1"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactMail1"
                                               TextExpression="@(() => EditingCompany.ContactMail1)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactMail1 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactMail1)" />
                                </DxFormLayoutItem>
                            </Items>
                        </DxFormLayoutGroup>

                        <div class="row" style="display:contents"><Divider DividerType="DividerType.Solid" /> </div>

                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["Contact2"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["Contact2"]</Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>

                                <DxFormLayoutItem Caption="@L["ContactName2"]" ColSpanLg="4" ColSpanMd="12">

                                    <DxTextBox Text="@EditingCompany.ContactName2"
                                               TextExpression="@(() => EditingCompany.ContactName2)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactName2 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactName2)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["ContactDept2"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactDept2"
                                               TextExpression="@(() => EditingCompany.ContactDept2)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactDept2 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactDept2)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["ContactPosition2"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactPosition2"
                                               TextExpression="@(() => EditingCompany.ContactPosition2)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactPosition2 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactPosition2)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["ContactPhone2"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactPhone2"
                                               TextExpression="@(() => EditingCompany.ContactPhone2)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactPhone2 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactPhone2)" />
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="@L["ContactMail2"]" ColSpanLg="4" ColSpanMd="12">
                                    <DxTextBox Text="@EditingCompany.ContactMail2"
                                               TextExpression="@(() => EditingCompany.ContactMail2)" TextChanged="@((newValue) => {
                                                            isDataEntryChanged  = true;
                                                            EditingCompany.ContactMail2 = newValue;
															})" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />

                                    <ValidationMessage For="@(() => EditingCompany.ContactMail2)" />
                                </DxFormLayoutItem>
                            </Items>
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** Land information ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["LandInformation"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["LandInformation"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="LandInfomationGridNew_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateLandInfomation || CanEditLandInfomation)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>
                                <DxGrid @ref="LandInfomationGrid" Data="@LandInfoList"
                                        @bind-SelectedDataItems="@selectedLandInfo"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="LandInfomationGrid_OnCustomizeEditModel"
                                        EditModelSaving="LandInfomationGrid_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@LandInfoPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="LandInfoChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@LandInfoPageSize" PagerVisibleNumericButtonCount="@LandInfoPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbLandInfoUpdateDto.Description)" Caption="@L["Description"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbLandInfoUpdateDto)context.EditModel).Description)"
                                                           TextExpression="@(() => ((TbLandInfoUpdateDto)context.EditModel).Description)"
                                                           TextChanged="@(async (newValue) => {((TbLandInfoUpdateDto)context.EditModel).Description = newValue;
                                                                                                isDataEntryChanged  = true; })"
                                                           BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbLandInfoUpdateDto.Address)" Caption="@L["Address"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbLandInfoUpdateDto)context.EditModel).Address)"
                                                           TextExpression="@(() => ((TbLandInfoUpdateDto)context.EditModel).Address)"
                                                           TextChanged="@(async (newValue) => {((TbLandInfoUpdateDto)context.EditModel).Address = newValue;
                                                                                                isDataEntryChanged  = true; })"
                                                           BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbLandInfoUpdateDto.TypeOfLand)" Caption="@L["TypeOfLand"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbLandInfoUpdateDto)context.EditModel).TypeOfLand)"
                                                           TextExpression="@(() => ((TbLandInfoUpdateDto)context.EditModel).TypeOfLand)"
                                                           TextChanged="@(async (newValue) => {((TbLandInfoUpdateDto)context.EditModel).TypeOfLand = newValue;
                                                                                                isDataEntryChanged  = true; })"
                                                           BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbLandInfoUpdateDto.Area)" Caption="@L["Area"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit ShowSpinButtons="false" Mask="#,###,###,###,###,##0.00"
                                                            Value="@(((TbLandInfoUpdateDto)context.EditModel).Area)"
                                                            ValueExpression="@(() => ((TbLandInfoUpdateDto)context.EditModel).Area)"
                                                            ValueChanged="@((Decimal? newValue) => { isDataEntryChanged  = true;
                                                                ((TbLandInfoUpdateDto)context.EditModel).Area = newValue;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value" ShowValidationIcon="true" />
                                            </CellEditTemplate> 
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbLandInfoUpdateDto.SupportingDocument)" Caption="@L["SupportingDocument"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbLandInfoUpdateDto)context.EditModel).SupportingDocument)"
                                                           TextExpression="@(() => ((TbLandInfoUpdateDto)context.EditModel).SupportingDocument)"
                                                           TextChanged="@(async (newValue) => {((TbLandInfoUpdateDto)context.EditModel).SupportingDocument = newValue;
                                                                                                isDataEntryChanged  = true; })"
                                                           BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => LandInfomationGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRow" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>
                                    @*======================= SALES ROUTE MASTER GRID - POPUP EDIT FORM =========================*@

                                    <EditFormTemplate Context="EditFormPopupContextLandInfo">
                                        @{
                                            EditingLandInfo = (TbLandInfoUpdateDto)EditFormPopupContextLandInfo.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@L["Description"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingLandInfo.Description)"
                                                                   TextExpression="@(() => EditingLandInfo.Description)"
                                                                   TextChanged="@(async (newValue) => { isDataEntryChanged  = true; EditingLandInfo.Description = newValue; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingLandInfo.Description)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Address"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingLandInfo.Address)"
                                                                   TextExpression="@(() => EditingLandInfo.Address)"
                                                                   TextChanged="@(async (newValue) => { EditingLandInfo.Address = newValue; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingLandInfo.Address)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["TypeOfLand"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingLandInfo.TypeOfLand)"
                                                                   TextExpression="@(() => EditingLandInfo.TypeOfLand)"
                                                                   TextChanged="@(async (newValue) => { isDataEntryChanged  = true; EditingLandInfo.TypeOfLand = newValue; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingLandInfo.TypeOfLand)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Area"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxSpinEdit ShowSpinButtons="false" Mask="#,###,###,###,###,##0.00"
                                                                    Value="@(EditingLandInfo.Area)"
                                                                    ValueExpression="@(() => EditingLandInfo.Area)"
                                                                    ValueChanged="@(async (Decimal? newValue) => { isDataEntryChanged  = true; EditingLandInfo.Area = newValue;})"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingLandInfo.Area)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["SupportingDocument"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingLandInfo.SupportingDocument)"
                                                                   TextExpression="@(() => EditingLandInfo.SupportingDocument)"
                                                                   TextChanged="@(async (newValue) => { isDataEntryChanged  = true; EditingLandInfo.SupportingDocument = newValue; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingLandInfo.SupportingDocument)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => LandInfomationGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveLandInfoAsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>

                                </DxGrid>
                            </Items>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** Investment ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["Investment"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["Investment"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="InvestmentGrid_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateInvestment || CanEditInvestment)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>
                                <DxGrid @ref="InvestmentGrid" Data="@CompanyInvestList"
                                        @bind-SelectedDataItems="@selectedInvest"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="InvestmentGrid_OnCustomizeEditModel"
                                        EditModelSaving="InvestmentGrid_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@InvestmentPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="InvestmentChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@InvestmentPageSize" PagerVisibleNumericButtonCount="@InvestmentPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>
                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyInvestUpdateDto.CompanyName)" Caption="@L["COMPANY NAME"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbCompanyInvestUpdateDto)context.EditModel).CompanyName)"
                                                           TextExpression="@(() => ((TbCompanyInvestUpdateDto)context.EditModel).CompanyName)"
                                                           TextChanged="@(async (newValue) => {
                                                ((TbCompanyInvestUpdateDto)context.EditModel).CompanyName = newValue;
                                                                                                isDataEntryChanged  = true; })"
                                                           BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbCompanyInvestUpdateDto.Shares)" Caption="@L["SHARES"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyInvestUpdateDto)context.EditModel).Shares)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyInvestUpdateDto)context.EditModel).Shares)"
                                                            ValueChanged="@(async (Decimal? newValue) => {
                                                                            ((TbCompanyInvestUpdateDto)context.EditModel).Shares = newValue;
                                                                             isDataEntryChanged  = true; })"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbCompanyInvestUpdateDto.Holding)" Caption="@L["% HOLDING"]">
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbCompanyInvestUpdateDto)context.EditModel).Holding)" Mask="#,###,###,###,###,##0.00"
                                                            ValueExpression="@(() => ((TbCompanyInvestUpdateDto)context.EditModel).Holding)"
                                                            ValueChanged="@(async (Decimal? newValue) => {((TbCompanyInvestUpdateDto)context.EditModel).Holding = newValue;
                                                                                                isDataEntryChanged  = true; })"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => InvestmentGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRow" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>

                                    @*== SALES ROUTE MASTER GRID - POPUP EDIT FORM ====*@
                                    <EditFormTemplate Context="EditFormPopupContext">
                                        @{
                                            EditingInvestment = (TbCompanyInvestUpdateDto)EditFormPopupContext.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@L["CompanyName"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingInvestment.CompanyName)"
                                                                   TextExpression="@(() => EditingInvestment.CompanyName)"
                                                                   TextChanged="@(async (newValue) => { isDataEntryChanged  = true; EditingInvestment.CompanyName = newValue; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingInvestment.CompanyName)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Shares"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxSpinEdit ShowSpinButtons="false"
                                                                    Value="@(EditingInvestment.Shares)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingInvestment.Shares)"
                                                                    ValueChanged="@(async (Decimal? newValue) => {  isDataEntryChanged  = true;EditingInvestment.Shares = newValue;})"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingInvestment.Shares)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Holding"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxSpinEdit ShowSpinButtons="false"
                                                                    Value="@(EditingInvestment.Holding)" Mask="#,###,###,###,###,##0.00"
                                                                    ValueExpression="@(() => EditingInvestment.Holding)"
                                                                    ValueChanged="@(async (Decimal? newValue) => { isDataEntryChanged  = true; EditingInvestment.Holding = newValue;})"
                                                                    BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                    ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingInvestment.Holding)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => InvestmentGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveInvestAsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>
                                </DxGrid>

                            </Items>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** Additional information ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["AdditionalInformation"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["AdditionalInformation"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="AdditionInfoGridNew_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateAdditionInfo || CanEditAdditionInfo)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>
                                <DxGrid @ref="AdditionInfoGrid" Data="@AdditionInfoList"
                                        @bind-SelectedDataItems="@selectedAdditionInfo"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="AdditionInfoGrid_OnCustomizeEditModel"
                                        EditModelSaving="AdditionInfoGrid_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@AdditionInfoPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="AdditionInfoChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@AdditionInfoPageSize" PagerVisibleNumericButtonCount="@AdditionInfoPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbAdditionInfoUpdateDto.DocDate)" Caption="@L["DATE"]">
                                            <CellEditTemplate>
                                                <DxDateEdit Date="@(((TbAdditionInfoUpdateDto)context.EditModel).DocDate)"
                                                            DateExpression="@(() => ((TbAdditionInfoUpdateDto)context.EditModel).DocDate)"
                                                            DateChanged="@(async (DateTime? newValue) => {((TbAdditionInfoUpdateDto)context.EditModel).DocDate = newValue; isDataEntryChanged  = true;})"
                                                            InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbAdditionInfoUpdateDto.TypeOfGroup)" Caption="@L["TYPEOFGROUP"]">
                                            <CellEditTemplate>
                                                <DxComboBox Data="@TypeOfGroupTsClassCollection" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                            Value="@(((TbAdditionInfoUpdateDto)context.EditModel).TypeOfGroup)"
                                                            ValueExpression="(() => ((TbAdditionInfoUpdateDto)context.EditModel).TypeOfGroup)"
                                                            ValueChanged="@(async (string newValue) => { await TypeOfGroupChanged(newValue);})"
                                                            ValueFieldName="@nameof(TsClassDto.Code)"
                                                            TextFieldName="@nameof(TsClassDto.Name)"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            InputCssClass="focus-value"
                                                            ShowValidationIcon="true" EditFormat="{0} - {1}" DisplayFormat="{0} - {1}">
                                                        <Columns>
                                                            <DxListEditorColumn Width="20px" FieldName="@nameof(TsClassDto.Code)"
                                                                                Caption="@L["Code"]" />
                                                            <DxListEditorColumn Width="70px" FieldName="@nameof(TsClassDto.Name)"
                                                                                Caption="@L["Name"]" />
                                                        </Columns>
                                                </DxComboBox>
                                                <ValidationMessage For="@(() => ((TbAdditionInfoUpdateDto)context.EditModel).TypeOfGroup)" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbAdditionInfoUpdateDto.TypeOfEvent)" Caption="@L["NAMEOFEVENT"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbAdditionInfoUpdateDto)context.EditModel).TypeOfEvent)"
                                                           TextExpression="@(() => ((TbAdditionInfoUpdateDto)context.EditModel).TypeOfEvent)"
                                                           TextChanged="@(async (newValue) => {
                                                ((TbAdditionInfoUpdateDto)context.EditModel).TypeOfEvent = newValue; isDataEntryChanged  = true;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbAdditionInfoUpdateDto.Description)" Caption="@L["DESCRIPTION"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbAdditionInfoUpdateDto)context.EditModel).Description)"
                                                           TextExpression="@(() => ((TbAdditionInfoUpdateDto)context.EditModel).Description)"
                                                           TextChanged="@(async (newValue) => {
                                                ((TbAdditionInfoUpdateDto)context.EditModel).Description = newValue; isDataEntryChanged  = true;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbAdditionInfoUpdateDto.NoOfDocument)" Caption="@L["NOOFDOCUMENTANY"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbAdditionInfoUpdateDto)context.EditModel).NoOfDocument)"
                                                           TextExpression="@(() => ((TbAdditionInfoUpdateDto)context.EditModel).NoOfDocument)"
                                                           TextChanged="@(async (newValue) => {
                                                ((TbAdditionInfoUpdateDto)context.EditModel).NoOfDocument = newValue; isDataEntryChanged  = true;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                        <DxGridDataColumn FieldName="@nameof(TbAdditionInfoUpdateDto.Remark)" Caption="@L["REMARK"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbAdditionInfoUpdateDto)context.EditModel).Remark)"
                                                           TextExpression="@(() => ((TbAdditionInfoUpdateDto)context.EditModel).Remark)"
                                                           TextChanged="@(async (newValue) => {
                                                ((TbAdditionInfoUpdateDto)context.EditModel).Remark = newValue; isDataEntryChanged  = true;
                                        })" BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridCommandColumn Width="6rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => AdditionInfoGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen" Clicked="ClickEditRow" />
                                                </Buttons>
                                            </CellEditTemplate>
                                        </DxGridCommandColumn>
                                    </Columns>

                                    @*== SALES ROUTE MASTER GRID - POPUP EDIT FORM ====*@
                                    <EditFormTemplate Context="EditFormPopupContext">
                                        @{
                                            EditingAdditionInfo = (TbAdditionInfoUpdateDto)EditFormPopupContext.EditModel;
                                        }

                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">


                                                    <DxFormLayoutItem Caption="@L["Date"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingAdditionInfo.DocDate"
                                                                    DateExpression="@(()=>EditingAdditionInfo.DocDate)"
                                                                    DateChanged="@((DateTime? e) => {
																			    if(EditingAdditionInfo.DocDate != null || e != null)
																				{
																					isDataEntryChanged  = true;
																					EditingAdditionInfo.DocDate = e.Value.Date; }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy"/>
                                                        <ValidationMessage For="@(() => EditingAdditionInfo.DocDate)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["TypeOfGroup"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxComboBox Data="@TypeOfGroupTsClassCollection" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    Value="@EditingAdditionInfo.TypeOfGroup"
                                                                    ValueExpression="(() => EditingAdditionInfo.TypeOfGroup)"
                                                                    ValueChanged="@(async (string newValue) => { await TypeOfGroupChanged(newValue);})"
                                                                    ValueFieldName="@nameof(TsClassDto.Code)"
                                                                    TextFieldName="@nameof(TsClassDto.Name)"
                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingAdditionInfo.TypeOfGroup)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["NameOfEvent"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingAdditionInfo.TypeOfEvent)"
                                                                   TextExpression="@(() => EditingAdditionInfo.TypeOfEvent)"
                                                                   TextChanged="@(async (newValue) => { EditingAdditionInfo.TypeOfEvent = newValue; isDataEntryChanged  = true; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingAdditionInfo.TypeOfEvent)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Description"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingAdditionInfo.Description)"
                                                                   TextExpression="@(() => EditingAdditionInfo.Description)"
                                                                   TextChanged="@(async (newValue) => { EditingAdditionInfo.Description = newValue; isDataEntryChanged  = true; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingAdditionInfo.Description)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["NoOfDocument"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingAdditionInfo.NoOfDocument)"
                                                                   TextExpression="@(() => EditingAdditionInfo.NoOfDocument)"
                                                                   TextChanged="@(async (newValue) => { EditingAdditionInfo.NoOfDocument = newValue; isDataEntryChanged  = true; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingAdditionInfo.NoOfDocument)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["Remark"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingAdditionInfo.Remark)"
                                                                   TextExpression="@(() => EditingAdditionInfo.Remark)"
                                                                   TextChanged="@(async (newValue) => { EditingAdditionInfo.Remark = newValue; isDataEntryChanged  = true; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingAdditionInfo.Remark)" />
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => AdditionInfoGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveAdditionInfoAsync" />

                                                        </Div>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>

                                </DxGrid>

                            </Items>
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingCompany" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        @******************************************** File Attach ***********************************@
                        <DxFormLayoutGroup ColSpanMd="12" Caption="@L["AttachFile"]" HeaderCssClass="my-header"
                                           ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                           AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                    <Div>@L["AttachFile"]</Div>
                                    <Div class="demo-unemployed-checkbox-container">
                                        <Button Clicked="FileUploadGridNew_Click" Size="Blazorise.Size.Small"
                                                Color="Color.Primary"
                                                Visibility="@((CanCreateFileUpload || CanEditFileUpload)? Visibility.Visible : Visibility.Invisible)">
                                            <Icon Name="IconName.Add" /> @L["AddNew"]
                                        </Button>
                                    </Div>
                                </Div>
                            </HeaderContentTemplate>
                            <Items>
                                <DxGrid @ref="FileUploadGrid" Data="@FileUploadList"
                                        @bind-SelectedDataItems="@selectedFileUpload"
                                        EditFormButtonsVisible="false" PopupEditFormHeaderText="@L[$"{PopupHeaderText}"]"
                                        SelectionMode="GridSelectionMode.Multiple" AllowSelectRowByClick="true"
                                        EditMode="GridEditMode.PopupEditForm"
                                        EditNewRowPosition="GridEditNewRowPosition.Bottom" FocusedRowEnabled="true"
                                        CustomizeEditModel="FileUploadGrid_OnCustomizeEditModel"
                                        EditModelSaving="FileUploadGrid_EditModelSaving"
                                        EditorRenderMode="GridEditorRenderMode.Integrated"
                                        TextWrapEnabled="false"
                                        PageSize="@FileUploadPageSize"
                                        PagerPosition="GridPagerPosition.Bottom" PageSizeSelectorVisible="true" PageSizeChanged="FileUploadChangePageSize"
                                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 50 })" PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="@FileUploadPageSize" PagerVisibleNumericButtonCount="@FileUploadPageSize"
                                        PagerNavigationMode="PagerNavigationMode.NumericButtons"
                                        PopupEditFormCssClass="my-style">
                                    <Columns>

                                        <DxGridDataColumn FieldName="Id" Caption="#" SortIndex="0" Width="2%"
                                                          DataRowEditorVisible="false">
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbFileUploadUpdateDto.note)" Caption="@L["NoOfDocument"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbFileUploadUpdateDto)context.EditModel).note)"
                                                           TextExpression="@(() => ((TbFileUploadUpdateDto)context.EditModel).note)"
                                                           TextChanged="@(async (newValue) => {isDataEntryChanged = true; ((TbFileUploadUpdateDto)context.EditModel).note = newValue;})"
                                                           BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbFileUploadUpdateDto.uploadDate)" Caption="@L["DocDate"]">
                                            <CellEditTemplate>
                                                <DxDateEdit Date="@(((TbFileUploadUpdateDto)context.EditModel).uploadDate)"
                                                            DateExpression="@(() => ((TbFileUploadUpdateDto)context.EditModel).uploadDate)"
                                                            DateChanged="@(async (DateTime? newValue) => {isDataEntryChanged = true; ((TbFileUploadUpdateDto)context.EditModel).uploadDate = newValue;})"
                                                            InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbFileUploadUpdateDto.UserUpload)" Caption="@L["UserUpload"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    var userId = (int?)context.Value;
                                                    var userName = TbUserList.FirstOrDefault(x => x.Id == userId)?.FullName;
                                                    @userName
                                                }
                                            </CellDisplayTemplate>
                                            <CellEditTemplate>
                                                <DxSpinEdit Value="@(((TbFileUploadUpdateDto)context.EditModel).UserUpload)"
                                                            ValueExpression="@(() => ((TbFileUploadUpdateDto)context.EditModel).UserUpload)"
                                                            ValueChanged="@(async (int? newValue) => {isDataEntryChanged = true; ((TbFileUploadUpdateDto)context.EditModel).UserUpload = newValue;})"
                                                            BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                            ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbFileUploadUpdateDto.fileName)" Caption="@L["FileName"]">
                                            <CellEditTemplate>
                                                <DxTextBox Text="@(((TbFileUploadUpdateDto)context.EditModel).fileName)"
                                                           TextExpression="@(() => ((TbFileUploadUpdateDto)context.EditModel).fileName)"
                                                           TextChanged="@(async (newValue) => {isDataEntryChanged = true; ((TbFileUploadUpdateDto)context.EditModel).fileName = newValue;})"
                                                           BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                           ShowValidationIcon="true" />
                                            </CellEditTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="@nameof(TbFileUploadUpdateDto.DownloadCount)" Caption="@L["DownloadCount"]">
                                            <CellDisplayTemplate>
                                                @{
                                                    var value = (int?)context.Value;

                                                    if (value == 0)
                                                    {
                                                        <a>0</a>
                                                    }
                                                    else
                                                    {
                                                        <a>@value</a>

                                                    }
                                                }
                                            </CellDisplayTemplate>
                                        </DxGridDataColumn>

                                        <DxGridCommandColumn Width="5rem" EditButtonVisible="true" SaveButtonVisible="false"
                                                             CancelButtonVisible="false" DeleteButtonVisible="false" NewButtonVisible="false">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Pen"
                                                          Clicked="@(() => FileUploadGrid.StartEditRowAsync(context.VisibleIndex))" />
                                                </Buttons>
                                            </CellDisplayTemplate>
                                        </DxGridCommandColumn>

                                        <DxGridDataColumn Width="5rem" Caption="@L[""]">
                                            <CellDisplayTemplate>
                                                <Buttons Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;">
                                                    <Icon Name="IconName.Download" Clicked="@(() => DownloadAsync((context.DataItem as TbFileUploadUpdateDto).Id))" />
                                                </Buttons>
                                            </CellDisplayTemplate>

                                            <CellEditTemplate>
                                                <Button Style="font-size:15px; cursor:pointer; padding: 0 0.3rem;"
                                                        Clicked="@(() => DownloadAsync((context.EditModel as TbFileUploadUpdateDto).Id))">
                                                    <Icon Name="IconName.Download" />
                                                </Button>
                                            </CellEditTemplate>
                                        </DxGridDataColumn>


                                    </Columns>

                                    <EditFormTemplate Context="EditFormPopupContext">
                                        @{
                                            EditingFileUpload = (TbFileUploadUpdateDto)EditFormPopupContext.EditModel;
                                        }
                                        <Row>
                                            <Column>
                                                <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                                                    <DxFormLayoutItem Caption="@L["NoOfDocument"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingFileUpload.note)"
                                                                   TextExpression="@(() => EditingFileUpload.note)"
                                                                   TextChanged="@(async (string newValue) => { EditingFileUpload.note = newValue; isDataEntryChanged = true; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true" />
                                                        <ValidationMessage For="@(() => EditingFileUpload.note)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["DocDate"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxDateEdit Date="EditingFileUpload.uploadDate"
                                                                    DateExpression="@(()=>EditingFileUpload.uploadDate)"
                                                                    DateChanged="@((DateTime? e) => { if(EditingFileUpload.uploadDate != null || e != null){
                                                                                                         isDataEntryChanged = true;
                                                                                                         EditingFileUpload.uploadDate = e.Value.Date;
                                                                                            }})"
                                                                    InputCssClass="focus-value"
                                                                    ShowValidationIcon="true"
                                                                    DisplayFormat="dd/MM/yyyy" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["UserUpload"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxComboBox Data="@TbUserList" ShowDropDownButton=false
                                                                    Value="@EditingFileUpload.UserUpload"
                                                                    ValueExpression="@(() => EditingFileUpload.UserUpload)"
                                                                    TextFieldName="@nameof(TbUserDto.FullName)"
                                                                    ValueFieldName="@nameof(TbUserDto.Id)"
                                                                    InputCssClass="focus-value" DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                                                    ReadOnly="true">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => EditingFileUpload.UserUpload)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L["FileName"]" ColSpanLg="12" ColSpanMd="12">
                                                        <DxTextBox Text="@(EditingFileUpload.fileName)"
                                                                   TextExpression="@(() => EditingFileUpload.fileName)"
                                                                   TextChanged="@(async (newValue) => { EditingFileUpload.fileName = newValue; isDataEntryChanged = true; })"
                                                                   BindValueMode="BindValueMode.OnLostFocus" InputCssClass="focus-value"
                                                                   ShowValidationIcon="true"
                                                                   ReadOnly="true" />
                                                        <ValidationMessage For="@(() => EditingFileUpload.fileName)" />
                                                    </DxFormLayoutItem>

                                                    <DxFormLayoutItem Caption="@L[""]" ColSpanLg="12" ColSpanMd="12">
                                                        @if (EditingFileUpload.companyId != null && EditingCompanyId != 0)
                                                        {
                                                            if (EditingFileUpload.fileName != null)
                                                            {
                                                                <FileDisplay fileName="@EditingFileUpload.fileName" fileId="EditingFileUpload.Id" OnDelete="RemoveFileAsync" />
                                                            }
                                                            else
                                                            {
                                                                <UploadFiles OnFileSelected="HandleFileSelected" />
                                                            }
                                                        }
                                                    </DxFormLayoutItem>

                                                    <br />
                                                    <DxFormLayoutItem ColSpanMd="12">
                                                        <Div Style="text-align: right;">
                                                            <DxButton style="background:#ffffff;color:black;border:none;"
                                                                      Click="@(() => FileUploadGrid.CancelEditAsync())" Text="Cancel" />
                                                            <DxButton style="background:#002d65;border:none;" SubmitFormOnClick="true" Text="OK" Click="SaveFilesAsync" />
                                                        </Div>
                                                    </DxFormLayoutItem>

                                                </DxFormLayout>
                                            </Column>
                                            <br />
                                        </Row>
                                    </EditFormTemplate>
                                </DxGrid>
                            </Items>
                        </DxFormLayoutGroup>

                        <div class="row" style="display:contents"><Divider DividerType="DividerType.Solid" /> </div>


                        @if (EditingCompany.StockCode != null)
                        {
                            @******************************************** Stock Price ***********************************@
                            <DxFormLayoutGroup ColSpanMd="12" Caption="@L["StockPrice"]" HeaderCssClass="my-header"
                                               ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                                               AnimationType="LayoutAnimationType.Slide">
                                <HeaderContentTemplate>
                                    <Div Style="display:flex; justify-content:space-between; align-items:center; width:100%">
                                        <Div>@L["StockPrice"]</Div>
                                    </Div>
                                </HeaderContentTemplate>
                                <Items>
                                    <DxFormLayoutItem ColSpanLg="12" ColSpanMd="12">
                                        <div style="width:100%" id="financial-data"></div>
                                    </DxFormLayoutItem>
                                </Items>
                            </DxFormLayoutGroup>
                        }

                    </DxFormLayout>

                </EditForm>
            </CardBody>
        </Card>

    </Column>

    @if (TbInfoUpdateList.Count() > 0)
    {
        <!-- Nội dung của Column 2 -->
        <Column ColumnSize="ColumnSize.Is12" style="@($"display:{(isColumn2Visible ? "block" : "none")};")">
            <Row>
                <Column Style="margin-left: -15px;padding: 5px 0 10px 0;">
                    <Button Style="border-style:double;border-width:2px;border-radius:2px;padding:0 15px;" Clicked="@HideHistory">
                        <Icon Name="@IconName.AngleLeft" /> @L["Back"]
                    </Button>
                </Column>
            </Row>
            <Histories ReportClassList="@ReportClassList" ReportKindClassList="@ReportKindClassList" TypeClassList="@TypeClassList"
                       GroupedChanges="@GroupedChanges" screenName="@screenName" screenId="@screenId"
                       isColumn1Visible="@isColumn1Visible" isColumn2Visible="@isColumn2Visible" />
        </Column>
    }
</Row>
