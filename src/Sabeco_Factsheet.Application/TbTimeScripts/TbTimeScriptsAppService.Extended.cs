using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using Sabeco_Factsheet.Permissions;
using Sabeco_Factsheet.TbTimeScripts;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using Sabeco_Factsheet.Shared;

namespace Sabeco_Factsheet.TbTimeScripts
{
    public class TbTimeScriptsAppService : TbTimeScriptsAppServiceBase, ITbTimeScriptsAppService
    {
        //<suite-custom-code-autogenerated>
        public TbTimeScriptsAppService(ITbTimeScriptRepository tbTimeScriptRepository, TbTimeScriptManager tbTimeScriptManager, IDistributedCache<TbTimeScriptDownloadTokenCacheItem, string> downloadTokenCache)
            : base(tbTimeScriptRepository, tbTimeScriptManager, downloadTokenCache)
        {
        }
        //HQSOFT's generated code:
        public virtual async Task<List<TbTimeScriptDto>> GetListNoPagedAsync(GetTbTimeScriptsInput input)
        {
            var items = await _tbTimeScriptRepository.GetListNoPagedAsync(input.FilterText, input.Code, input.YearMin, input.YearMax, input.MonthMin, input.MonthMax, input.DayMin, input.DayMax, input.HourMin, input.HourMax, input.MinuteMin, input.MinuteMax, input.SecondMin, input.SecondMax, input.Sorting);

            return ObjectMapper.Map<List<TbTimeScript>, List<TbTimeScriptDto>>(items);
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
    }
}