@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI
@addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI.Bootstrap
@addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI.Bundling

@using Microsoft.AspNetCore.Mvc.Localization
@using Sabeco_Factsheet.Localization
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.Settings

@model Sabeco_Factsheet.Blazor.Pages.Account.MyLoginModel

@inject IHtmlLocalizer<Sabeco_FactsheetResource> L
@inject Volo.Abp.Settings.ISettingProvider SettingProvider
@inject Volo.Abp.AspNetCore.Mvc.UI.Layout.IPageLayout PageLayout

@{
    PageLayout.Content.Title = L["LOGIN"].Value;
    var errorMessage = TempData["ErrorMessage"] as string;
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" style="font-size:16px">@errorMessage</div>
}


<form method="post">
    <div>
        <div class="form-floating mb-2">
            <input asp-for="LoginInput.UserNameOrEmailAddress" type="text" class="form-control" placeholder="name@example.com">
            @Html.LabelFor(m => m.LoginInput.UserNameOrEmailAddress)
            <span asp-validation-for="LoginInput.UserNameOrEmailAddress" />
        </div>

        <div class="form-floating mb-2">
            <input asp-for="LoginInput.Password" id="password-input" type="password" class="form-control" placeholder="Password">
            @Html.LabelFor(m => m.LoginInput.Password)
            <i id="PasswordVisibilityButton" class="bi bi-eye-slash show-pass-icon" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" aria-label="@L["ShowPassword"]" data-bs-original-title="@L["ShowPassword"]"></i>
            <i id="capslockicon" class="bi bi-capslock caps-lock-icon" style="display: none;" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" aria-label="<i class='bi bi-exclamation-circle'></i> @L["CapsLockOn"]!" data-bs-original-title="<i class='bi bi-exclamation-circle'></i> @L["CapsLockOn"]!"></i>
            <span asp-validation-for="LoginInput.Password" />
        </div>
    </div>
    <abp-row>
        <abp-column>
            <div class="form-switch ps-2">
                <abp-input asp-for="LoginInput.RememberMe" class="mb-4" />
            </div>
        </abp-column>
        <abp-column class="text-end">
            <a href="@Url.Page("./ForgotPassword", new { returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash })">@L["ForgotPassword"]</a>
        </abp-column>
    </abp-row>

    <div class="d-grid gap-2">
        <abp-button button-type="Primary" type="submit" class="mb-3" name="Action" value="Login">
            <i class="bi bi-box-arrow-in-right me-1"></i>
            @L["Login"]
        </abp-button>
    </div>

    @if (Model.ShowCancelButton)
    {
        <div class="d-grid gap-2">
            <abp-button button-type="Secondary" type="submit" formnovalidate="formnovalidate" class="mb-3" name="Action" value="Cancel">@L["Cancel"]</abp-button>
        </div>
    }
</form>

@if (Model.VisibleExternalProviders.Any())
{
    <hr />
    @L["Or sign in with"]

    <br />
    <form asp-page="./Login" asp-page-handler="ExternalLogin"
          asp-route-returnUrl="@Model.ReturnUrl"
          asp-route-returnUrlHash="@Model.ReturnUrlHash"
          asp-route-linkTenantId="@Model.LinkTenantId"
          asp-route-linkUserId="@Model.LinkUserId"
          asp-route-linkToken="@Model.LinkToken"
          method="post">
        @foreach (var provider in Model.VisibleExternalProviders)
        {
            <button type="submit"
                    class="mt-2 me-2 btn btn-outline-primary btn-sm"
                    name="provider"
                    value="@provider.AuthenticationScheme"
                    data-busy-text="@L["ProcessingWithThreeDot"]">
                @if (provider.Icon != null)
                {
                    <i class="@provider.Icon"></i>
                }
                <span>@provider.DisplayName</span>
            </button>
        }
    </form>
}